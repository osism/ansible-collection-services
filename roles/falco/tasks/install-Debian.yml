---
- name: Remove old architecture-dependent repository
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [ arch=amd64 ] https://download.falco.org/packages/deb stable main"
    state: absent
    filename: falco
  when: falco_configure_repository|bool

- name: Install apt-transport-https package
  become: true
  ansible.builtin.apt:
    name: apt-transport-https
    state: present
    lock_timeout: "{{ apt_lock_timeout | default(300) }}"
  when: falco_configure_repository|bool
  changed_when: false

- name: Add repository gpg key with apt-key
  become: true
  ansible.builtin.apt_key:
    url: "{{ falco_debian_repository_key }}"
  when:
    - falco_configure_repository|bool
    - ansible_distribution_version is version('22.04', '<')

- name: Add repository gpg key
  become: true
  ansible.builtin.get_url:
    url: "{{ falco_debian_repository_key }}"
    dest: /etc/apt/trusted.gpg.d/falco.asc
    mode: 0644
    owner: root
    group: root
  when:
    - falco_configure_repository|bool
    - ansible_distribution_version is version('22.04', '>=')

- name: Add repository
  become: true
  ansible.builtin.apt_repository:
    repo: "{{ falco_debian_repository }}"
    state: present
    filename: falco
    update_cache: true
  when: falco_configure_repository|bool

- name: "Install package {{ falco_package_name }}"
  become: true
  ansible.builtin.apt:
    name: "{{ falco_package_name }}"
    state: latest
    lock_timeout: "{{ apt_lock_timeout | default(300) }}"
  notify: "Restart service {{ falco_service_name }}"

- name: Install kernel module using driver loader
  become: true
  ansible.builtin.command:
    cmd: falco-driver-loader module
  notify: "Restart service {{ falco_service_name }}"
  changed_when: true

- name: Symlink kernel modules
  become: true
  ansible.builtin.shell:
    cmd: |
      ln -s /root/.falco/*/x86_64/falco_*.ko /lib/modules/$(uname -r)/falco.ko
      depmod
  notify: "Restart service {{ falco_service_name }}"
  changed_when: true

- name: Check if /var/run/reboot-required exist
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: result

- name: Print message if /var/run/reboot-required exist
  ansible.builtin.debug:
    msg: "Reboot of {{ inventory_hostname }} required to get the latest kernel running"
  when: result.stat.islnk is defined

- name: Persist falco kernel module via modules-load.d
  become: true
  ansible.builtin.copy:
    content: falco
    dest: /etc/modules-load.d/falco.conf
    owner: root
    group: root
    mode: 0644

- name: Load falco kernel module
  become: true
  community.general.modprobe:
    name: falco
    state: present

- name: "Start/enable service {{ falco_service_name }}"
  become: true
  ansible.builtin.service:
    name: "{{ falco_service_name }}"
    state: started
    enabled: true
