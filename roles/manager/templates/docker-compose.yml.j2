---
version: '3.5'

services:
  inventory_reconciler:
    restart: unless-stopped
    image: "{{ inventory_reconciler_image }}"
    tmpfs:
      - /inventory.pre:uid=45000,gid=45000
    volumes:
      - "/etc/ssl/certs:/etc/ssl/certs:ro"
      - "interface:/interface:ro"
      - "inventory_reconciler:/inventory"
      - "{{ configuration_directory }}/inventory:/opt/configuration/inventory:ro"
{% if enable_celery|bool %}
    healthcheck:
      test: pgrep celery
    environment:
      - CELERY=1
{% else %}
    healthcheck:
      test: pgrep crond
    environment:
      - CELERY=0
{% endif %}
{% if enable_netbox|bool %}
    secrets:
      - NETBOX_TOKEN
    env_file:
      - "{{ manager_configuration_directory }}/ansible.env"
{% endif %}
  osism-ansible: &ansible
    restart: unless-stopped
    image: "{{ osism_ansible_image }}"
    env_file:
      - "{{ manager_configuration_directory }}/ansible.env"
{% if enable_ara|bool %}
      - "{{ manager_configuration_directory }}/ara.env"
{% endif %}
{% if enable_celery|bool %}
    command: osism worker osism-ansible
    environment:
      - CELERY=1
    healthcheck:
      test: pgrep celery
{% else %}
    command: sleep infinity
    environment:
      - CELERY=0
{% endif %}
    volumes:
      - "/etc/hosts:/etc/hosts:ro"
      - "/etc/localtime:/etc/localtime:ro"
      - "/etc/ssl/certs:/etc/ssl/certs:ro"
      - "/etc/timezone:/etc/timezone:ro"
      - "cache:{{ cache_directory }}"
      - "logs:{{ logs_directory }}"
      - "share:/share"
      - "{{ archive_directory }}:/archive:rw"
      - "{{ configuration_directory }}:/opt/configuration:ro"
      - "{{ state_directory }}/netbox:/state:ro"
      - "{{ secrets_directory }}:/ansible/secrets:ro"
      - "inventory_reconciler:/ansible/inventory:ro"
      - "interface:/interface"
{% if enable_netbox|bool %}
    secrets:
      - NETBOX_TOKEN
{% endif %}
    depends_on:
      - inventory_reconciler
      - redis
{% if enable_ara|bool %}
      - ara-server
{% endif %}
{% if enable_vault|bool %}
      - vault
{% endif %}
{% for service in ansible_services %}
{% if service.enable|bool %}
  {{ service.name }}:
    <<: *ansible
    image: "{{ service.image }}"
{% if enable_celery|bool %}
    command: osism worker {{ service.name }}
    healthcheck:
      test: pgrep celery
    environment:
      - CELERY=1
{% endif %}
{% endif %}
{% endfor %}
{% if enable_celery|bool %}
{% if enable_netbox|bool %}
  netbox:
    restart: unless-stopped
    image: "{{ osism_netbox_image }}"
    command: osism worker netbox
    volumes:
      - "/etc/ssl/certs:/etc/ssl/certs:ro"
      - "{{ configuration_directory }}/netbox:/netbox:ro"
      - "{{ state_directory }}/netbox:/state:rw"
    secrets:
      - NETBOX_TOKEN
    env_file:
      - "{{ manager_configuration_directory }}/ansible.env"
{% endif %}
  watchdog:
    restart: unless-stopped
    image: "{{ osism_image }}"
    command: osism watchdog
    volumes:
      - "{{ configuration_directory }}:/opt/configuration:ro"
  api:
    restart: unless-stopped
    image: "{{ osism_image }}"
    command: uvicorn osism.api:app --host 0.0.0.0 --port 8000
    ports:
      - "{{ osism_api_host }}:{{ osism_api_port }}:8000"
    healthcheck:
      test: pgrep uvicorn
  beat:
    restart: unless-stopped
    image: "{{ osism_image }}"
    command: osism beat
    healthcheck:
      test: pgrep celery
  osismclient:
    container_name: osismclient
    restart: unless-stopped
    image: "{{ osism_image }}"
    command: sleep infinity
  flower:
    restart: unless-stopped
    image: "{{ osism_image }}"
    command: osism flower
    ports:
      - "{{ flower_host }}:{{ flower_port }}:5555"
    healthcheck:
      test: pgrep celery
{% endif %}
  redis:
    restart: unless-stopped
    image: "{{ redis_image }}"
    command: redis-server --appendonly yes
    volumes:
      - "redis:/data"
    healthcheck:
      test: redis-cli ping
    networks:
      default:
        aliases:
          - cache
{% if enable_ara|bool %}
  ara-server:
    restart: unless-stopped
    image: "{{ ara_server_image }}"
    env_file:
      - "{{ manager_configuration_directory }}/ara-server.env"
      - "{{ manager_configuration_directory }}/ara.env"
    volumes:
      - /etc/hosts:/etc/hosts:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
{% if not ara_server_traefik|bool %}
    ports:
      - "{{ ara_server_host }}:{{ ara_server_port }}:8000"
{% endif %}
    healthcheck:
      test: curl --silent --fail --basic --user $$ARA_API_USERNAME:$$ARA_API_PASSWORD http://localhost:8000
{% if ara_server_traefik|bool %}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network={{ traefik_external_network_name }}"
      - "traefik.http.services.ara-server.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.ara-server-redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.ara-server-replace-prefix.replacepathregex.regex=^/{{ ara_server_traefik_path_prefix }}(/.*)"
      - "traefik.http.middlewares.ara-server-replace-prefix.replacepathregex.replacement=$$1"
      - "traefik.http.routers.ara-server.entrypoints=http"
{% if ara_server_traefik_host|length > 0 %}
      - "traefik.http.routers.ara-server.rule=Host(`{{ ara_server_traefik_host }}`) && PathPrefix(`/{{ ara_server_traefik_path_prefix }}/`)"
{% else %}
      - "traefik.http.routers.ara-server.rule=PathPrefix(`/{{ ara_server_traefik_path_prefix }}/`)"
{% endif %}
      - "traefik.http.routers.ara-server.middlewares=ara-server-redirect-to-https@docker, ara-server-replace-prefix@docker"
      - "traefik.http.routers.ara-server-secure.entrypoints=https"
      - "traefik.http.routers.ara-server-secure.tls=true"
{% if ara_server_traefik_host|length > 0 %}
      - "traefik.http.routers.ara-server-secure.rule=Host(`{{ ara_server_traefik_host }}`) && PathPrefix(`/{{ ara_server_traefik_path_prefix }}/`)"
{% else %}
      - "traefik.http.routers.ara-server-secure.rule=PathPrefix(`/{{ ara_server_traefik_path_prefix }}/`)"
{% endif %}
      - "traefik.http.routers.ara-server-secure.middlewares=ara-server-replace-prefix@docker"
    networks:
      - default
      - {{ traefik_external_network_name }}
{% endif %}
{% if ara_server_database_type == 'mysql' %}
    depends_on:
      - mariadb
  mariadb:
    restart: unless-stopped
    image: "{{ mariadb_image }}"
    env_file:
      - "{{ manager_configuration_directory }}/mariadb.env"
    volumes:
      - "mariadb:/var/lib/mysql"
    healthcheck:
      test: mysqladmin status -h localhost -u $$MYSQL_USER -p$$MYSQL_PASSWORD || exit 1
      test: mysqladmin status -h localhost -u $$MYSQL_USER -p$$MYSQL_PASSWORD || exit 1
{% endif %}
{% endif %}
{% if enable_awx|bool %}
  receptor:
    image: "{{ receptor_image }}"
    command: receptor --config /etc/receptor/receptor.conf
    restart: unless-stopped
    depends_on:
      - awx
    volumes:
      - /etc/hosts:/etc/hosts:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - "{{ manager_configuration_directory }}/receptor.conf:/etc/receptor/receptor.conf"
      - "receptor:/var/run/receptor"
  awxclient:
    container_name: "{{ awxclient_container_name }}"
    image: "{{ awxclient_image }}"
    command: sleep infinity
    restart: unless-stopped
    depends_on:
      - awx
    volumes:
      - /etc/hosts:/etc/hosts:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    env_file:
      - "{{ manager_configuration_directory }}/ansible.env"
      - "{{ manager_configuration_directory }}/awxclient.env"
{% if enable_ara|bool %}
      - "{{ manager_configuration_directory }}/ara.env"
{% endif %}
    secrets:
      - TOWER_PASSWORD
      - TOWER_USERNAME
  awx:
    image: "{{ awx_image }}"
    restart: unless-stopped
    hostname: awx
    user: root
    depends_on:
      - postgres
      - redis
{% if enable_vault|bool %}
      - vault
{% endif %}
    volumes:
      - /etc/hosts:/etc/hosts:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - "{{ manager_configuration_directory }}/create-admin-user.sh:/usr/local/bin/create-admin-user.sh"
      - "{{ manager_configuration_directory }}/credentials.py:/etc/tower/conf.d/credentials.py"
      - "{{ manager_configuration_directory }}/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "{{ manager_configuration_directory }}/provision-instance.sh:/usr/local/bin/provision-instance.sh"
      - "{{ manager_configuration_directory }}/receptor.conf:/etc/receptor/receptor.conf"
      - "{{ manager_configuration_directory }}/settings.py:/etc/tower/settings.py"
      - "{{ manager_configuration_directory }}/supervisord.conf:/etc/supervisord.conf"
      - "{{ configuration_directory }}:/opt/configuration:ro"
      - "{{ secrets_directory }}:/ansible/secrets:ro"
      - "inventory_reconciler:/inventory:ro"
      - "interface:/interface"
      - "awx_configuration:/configuration"
      - "awx_logs:/ansible/logs"
      - "receptor:/var/run/receptor"
      - "awx_share:/share"
    env_file:
      - "{{ manager_configuration_directory }}/ansible.env"
      - "{{ manager_configuration_directory }}/awx.env"
{% if enable_ara|bool %}
      - "{{ manager_configuration_directory }}/ara.env"
{% endif %}
    privileged: true
    security_opt:
      - apparmor:unconfined
    secrets:
{% if enable_netbox|bool %}
      - NETBOX_TOKEN
{% endif %}
      - TOWER_SECRET_KEY
    ports:
      - "{{ awx_server_host }}:{{ awx_server_port }}:8052"
      - "{{ awx_server_host }}:{{ awx_broadcast_websocket_port }}:8013"
    healthcheck:
      test: curl --silent --fail http://localhost:8052/api/v2
{% endif %}
{% if enable_vault|bool %}
  vault:
    image: "{{ vault_image }}"
    command: server -config=/etc/vault.hcl
    restart: unless-stopped
    ports:
      - "{{ vault_host }}:{{ vault_port }}:8200"
    env_file:
      - "{{ manager_configuration_directory }}/vault.env"
    volumes:
      - "{{ manager_configuration_directory }}/vault.hcl:/etc/vault.hcl:ro"
      - vault_file:/vault/file
      - vault_logs:/vault/logs
    cap_add:
      - IPC_LOCK
    healthcheck:
      # NOTE: If Vault is sealed the container is unhealthy
      #
      # 0 - unsealed
      # 1 - error
      # 2 - sealed
      test: vault status -address http://127.0.0.1:8200
{% endif %}
{% if enable_postgres|bool %}
  postgres:
    image: "{{ postgres_image }}"
    restart: unless-stopped
    env_file:
      - "{{ manager_configuration_directory }}/postgres.env"
    volumes:
      - "{{ manager_configuration_directory }}/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro"
      - postgres:/var/lib/postgresql/data
    secrets:
      - POSTGRES_PASSWORD
    healthcheck:
      test: pg_isready -U postgres
{% endif %}

volumes:
  inventory_reconciler:
  interface:
{% if enable_postgres|bool %}
  postgres:
{% endif %}
{% if enable_awx|bool %}
  awx_configuration:
  awx_logs:
  awx_share:
  receptor:
{% endif %}
{% if enable_vault|bool %}
  vault_file:
  vault_logs:
{% endif %}
  cache:
  logs:
{% if enable_ara|bool and ara_server_database_type == 'mysql' %}
  mariadb:
{% endif %}
  redis:
  share:

{% if enable_postgres|bool or enable_awx|bool or enable_netbox|bool %}
secrets:
{% if enable_awx|bool %}
  TOWER_PASSWORD:
    file: {{ manager_secrets_directory }}/TOWER_PASSWORD
  TOWER_USERNAME:
    file: {{ manager_secrets_directory }}/TOWER_USERNAME
  TOWER_SECRET_KEY:
    file: {{ manager_secrets_directory }}/TOWER_SECRET_KEY
{% endif %}
{% if enable_netbox|bool %}
  NETBOX_TOKEN:
    file: {{ manager_secrets_directory }}/NETBOX_TOKEN
{% endif %}
{% if enable_postgres|bool %}
  POSTGRES_PASSWORD:
    file: {{ manager_secrets_directory }}/POSTGRES_PASSWORD
{% endif %}
{% endif %}

networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: {{ docker_network_mtu }}
    ipam:
      driver: default
      config:
        - subnet:  {{ manager_network }}
{% if ara_server_traefik|bool %}
  {{ traefik_external_network_name }}:
    external: true
{% endif %}
