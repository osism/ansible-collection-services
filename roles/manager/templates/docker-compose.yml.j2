---
version: '3.5'
services:
  inventory_reconciler:
    restart: unless-stopped
    image: "{{ inventory_reconciler_image }}"
    tmpfs:
      - /inventory.pre:uid=45000,gid=45000
    volumes:
      - "inventory_reconciler:/inventory"
      - "{{ configuration_directory }}/inventory:/opt/configuration/inventory:ro"
  osism-ansible: &ansible
    restart: unless-stopped
    image: "{{ osism_ansible_image }}"
    env_file:
      - "{{ manager_configuration_directory }}/ansible.env"
{% if ara_enable|bool %}
      - "{{ manager_configuration_directory }}/ara.env"
{% endif %}
    command: sleep infinity
    volumes:
      - /etc/hosts:/etc/hosts:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - "cache:{{ cache_directory }}"
      - "logs:{{ logs_directory }}"
      - "share:/share"
      - "{{ archive_directory }}:/archive:rw"
      - "{{ configuration_directory }}:/opt/configuration:ro"
      - "{{ secrets_directory }}:/ansible/secrets:ro"
      - "inventory_reconciler:/ansible/inventory:ro"
{% if netbox_api_token|length %}
    secrets:
      - NETBOX_TOKEN
{% endif %}
    depends_on:
{% if redis_enable|bool %}
      - redis
{% endif %}
{% if ara_enable|bool %}
      - ara-server
{% endif %}
{% if ceph_ansible_enable|bool %}
  ceph-ansible:
    <<: *ansible
    image: "{{ ceph_ansible_image }}"
{% endif %}
{% if kolla_ansible_enable|bool %}
  kolla-ansible:
    <<: *ansible
    image: "{{ kolla_ansible_image }}"
{% endif %}
{% if redis_enable|bool %}
  redis:
    restart: unless-stopped
    image: "{{ redis_image }}"
    command: redis-server --appendonly yes
    volumes:
      - "redis:/data"
    healthcheck:
      test: redis-cli ping
    networks:
      default:
        aliases:
          - cache
{% endif %}
{% if ara_enable|bool %}
  ara-server:
    restart: unless-stopped
    image: "{{ ara_server_image }}"
    env_file:
      - "{{ manager_configuration_directory }}/ara-server.env"
      - "{{ manager_configuration_directory }}/ara.env"
    volumes:
      - /etc/hosts:/etc/hosts:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    ports:
      - "{{ ara_server_host }}:{{ ara_server_port }}:8000"
    healthcheck:
      test: curl --silent --fail --basic --user $$ARA_API_USERNAME:$$ARA_API_PASSWORD http://localhost:8000
{% if ara_server_database_type == 'mysql' %}
    depends_on:
      - mariadb
  mariadb:
    restart: unless-stopped
    image: "{{ mariadb_image }}"
    env_file:
      - "{{ manager_configuration_directory }}/mariadb.env"
    volumes:
      - "mariadb:/var/lib/mysql"
    healthcheck:
      test: mysqladmin status -h localhost -u $$MYSQL_USER -p$$MYSQL_PASSWORD || exit 1
      test: mysqladmin status -h localhost -u $$MYSQL_USER -p$$MYSQL_PASSWORD || exit 1
{% endif %}
{% endif %}
{% if awx_enable|bool %}
  awxclient:
    container_name: "{{ awxclient_container_name }}"
    image: "{{ awxclient_image }}"
    command: sleep infinity
    restart: unless-stopped
    depends_on:
      - awx
    volumes:
      - /etc/hosts:/etc/hosts:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    env_file:
      - "{{ manager_configuration_directory }}/ansible.env"
      - "{{ manager_configuration_directory }}/awxclient.env"
{% if ara_enable|bool %}
      - "{{ manager_configuration_directory }}/ara.env"
{% endif %}
    secrets:
      - TOWER_PASSWORD
      - TOWER_USERNAME
  awx:
    image: "{{ awx_image }}"
    command: /run.sh
    restart: unless-stopped
    hostname: awx
    user: root
    depends_on:
      - postgres
      - redis
{% if vault_enable|bool %}
      - vault
{% endif %}
    volumes:
      - /etc/hosts:/etc/hosts:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - "{{ manager_configuration_directory }}/awx.env:/etc/tower/conf.d/environment.sh"
      - "{{ manager_configuration_directory }}/credentials.py:/etc/tower/conf.d/credentials.py"
      - "{{ manager_configuration_directory }}/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "{{ manager_configuration_directory }}/settings.py:/etc/tower/settings.py"
      - "{{ configuration_directory }}:/opt/configuration:ro"
      - "{{ secrets_directory }}:/ansible/secrets:ro"
      - "awx_inventory:/inventory"
      - "awx_logs:/ansible/logs"
      - "awx_share:/share"
    environment:
      WAIT_HOSTS: redis:6379, postgres:5432, vault:8200
    env_file:
      - "{{ manager_configuration_directory }}/ansible.env"
      - "{{ manager_configuration_directory }}/awx.env"
{% if ara_enable|bool %}
      - "{{ manager_configuration_directory }}/ara.env"
{% endif %}
    cap_add:
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    secrets:
{% if netbox_api_token|length %}
      - NETBOX_TOKEN
{% endif %}
      - TOWER_PASSWORD
      - TOWER_SECRET_KEY
      - TOWER_USERNAME
    ports:
      - "{{ awx_server_host }}:{{ awx_server_port }}:8052"
    healthcheck:
      test: curl --silent --fail http://localhost:8052/api/v2
{% if vault_enable|bool %}
  vault:
    image: "{{ vault_image }}"
    command: server -config=/vault/config -dev -dev-root-token-id={{ vault_token }} -dev-listen-address=0.0.0.0:8200
    restart: unless-stopped
    ports:
      - "{{ vault_host }}:{{ vault_port }}:8200"
    env_file:
      - "{{ manager_configuration_directory }}/vault.env"
# NOTE: during the TP the service runs in-memory
#    volumes:
#      - vault:/vault/file
    cap_add:
      - IPC_LOCK
    healthcheck:
      # NOTE: If Vault is sealed the container is unhealthy
      #
      # 0 - unsealed
      # 1 - error
      # 2 - sealed
      test: vault status -address http://127.0.0.1:8200
{% endif %}
{% endif %}
{% if postgres_enable|bool %}
  postgres:
    image: "{{ postgres_image }}"
    restart: unless-stopped
    env_file:
      - "{{ manager_configuration_directory }}/postgres.env"
    volumes:
      - "{{ manager_configuration_directory }}/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro"
      - postgres:/var/lib/postgresql/data
    secrets:
      - POSTGRES_PASSWORD
    healthcheck:
      test: pg_isready -U postgres
{% endif %}

volumes:
  inventory_reconciler:
{% if postgres_enable|bool %}
  postgres:
{% endif %}
{% if awx_enable|bool %}
  awx_inventory:
  awx_logs:
  awx_share:
{% if vault_enable|bool %}
  vault:
{% endif %}
{% endif %}
  cache:
  logs:
{% if ara_enable|bool and ara_server_database_type == 'mysql' %}
  mariadb:
{% endif %}
{% if redis_enable|bool %}
  redis:
{% endif %}
  share:

{% if postgres_enable|bool or awx_enable|bool %}
secrets:
{% if awx_enable|bool %}
  TOWER_PASSWORD:
    file: {{ manager_secrets_directory }}/TOWER_PASSWORD
  TOWER_USERNAME:
    file: {{ manager_secrets_directory }}/TOWER_USERNAME
  TOWER_SECRET_KEY:
    file: {{ manager_secrets_directory }}/TOWER_SECRET_KEY
{% endif %}
{% if netbox_api_token|length %}
  NETBOX_TOKEN:
    file: {{ manager_secrets_directory }}/NETBOX_TOKEN
{% endif %}
{% if postgres_enable|bool %}
  POSTGRES_PASSWORD:
    file: {{ manager_secrets_directory }}/POSTGRES_PASSWORD
{% endif %}
{% endif %}

networks:
 default:
   driver: bridge
   ipam:
     driver: default
     config:
       - subnet:  {{ manager_network }}
