#!/usr/bin/env bash

# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

if [[ $# -lt 1 ]]; then
    echo usage: $0 MIRROR
    exit 1
fi

mirror=$1
shift

CONFIGURATION_DIRECTORY={{ configuration_directory }}
ENVIRONMENTS_DIRECTORY=$CONFIGURATION_DIRECTORY/environments

if [[ $mirror == "images" ]]; then

    configurationfile=$ENVIRONMENTS_DIRECTORY/infrastructure/configuration-mirror-images.yml
    repository_version=$(grep "^repository_version:" $configurationfile | sed -e 's/.*: \(.*\)/\1/')
    remove_local_docker_images=$(grep "^remove_local_docker_images:" $configurationfile | sed -e 's/.*: \(.*\)/\1/')

    if [[ ! -e $configurationfile ]]; then
        echo "error: necessary file $configurationfile missing"
        exit 1
    fi

    docker_namespace=$(grep "^docker_namespace:" $configurationfile | awk -F': ' '{ print $2 }')
    docker_registry=$(grep "^docker_registry_external:" $configurationfile | awk -F': ' '{ print $2 }')

    tmpdirectory=$CONFIGURATION_DIRECTORY/tmp-from-image-mirror
    mkdir -p $tmpdirectory

    for name in ceph-ansible kolla-ansible osism-ansible; do
        if [[ $name == "ceph-ansible" ]]; then
            version=$(grep "^ceph_version:" $configurationfile | awk -F': ' '{ print $2 }')-$(grep "^ceph_manager_version:" $configurationfile | awk -F': ' '{ print $2 }')
        elif [[ $name == "kolla-ansible" ]]; then
            version=$(grep "^openstack_version:" $configurationfile | awk -F': ' '{ print $2 }')-$(grep "^kolla_manager_version:" $configurationfile | awk -F': ' '{ print $2 }')
        else
            version=$(grep "^osism_manager_version:" $configurationfile | awk -F': ' '{ print $2 }')
        fi

        image=$docker_registry/$docker_namespace/$name:$version
        imagename=tmp-from-image-mirror-$name

        if [[ "$(docker images -q $image 2> /dev/null)" == "" ]]; then
            docker pull $image
            docker create --name $imagename $image
            docker cp $imagename:/ansible/group_vars/all/images.yml $tmpdirectory/$name-images.yml
            docker cp $imagename:/ansible/group_vars/all/images-project.yml $tmpdirectory/$name-images-project.yml
            docker rm $imagename

            if [[ $remove_local_docker_images == "true" ]]; then
                docker rmi $image
            fi
        else
            docker create --name $imagename $image
            docker cp $imagename:/ansible/group_vars/all/images.yml $tmpdirectory/$name-images.yml
            docker cp $imagename:/ansible/group_vars/all/images-project.yml $tmpdirectory/$name-images-project.yml
            docker rm $imagename
        fi
    done

    for imagesfile in $(find $tmpdirectory -type f); do
        osism-infrastructure mirror-images -e docker_images_file=$imagesfile -e repository_version=$repository_version
    done

    rm -rf $tmpdirectory

    if [[ -e $ENVIRONMENTS_DIRECTORY/images.yml ]]; then
        osism-infrastructure mirror-images -e docker_images_file=$ENVIRONMENTS_DIRECTORY/images.yml -e repository_version=$repository_version
    fi

    for environment in $(find $ENVIRONMENTS_DIRECTORY -mindepth 1 -maxdepth 1 -type d | xargs -n1 basename); do
        imagesfile=$ENVIRONMENTS_DIRECTORY/$environment/images.yml
        if [[ -e $imagesfile ]]; then
            osism-infrastructure mirror-images -e docker_images_file=$imagesfile -e repository_version=$repository_version
        fi
    done

elif [[ $mirror == "files" ]]; then

    osism-infrastructure mirror-files

elif [[ $mirror == "packages" ]]; then

    osism-infrastructure mirror-packages

else

    echo MIRROR has to be 'images' or 'packages' or 'files'
    exit 1

fi
