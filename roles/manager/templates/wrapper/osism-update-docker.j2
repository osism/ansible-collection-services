#!/usr/bin/env bash

# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

CONFIGURATION_DIRECTORY=${CONFIGURATION_DIRECTORY:-{{ configuration_directory }}}

ANSIBLE_COLLECTION_COMMONS_SOURCE=${ANSIBLE_COLLECTION_COMMONS_SOURCE:-git+https://github.com/osism/ansible-collection-commons}
ANSIBLE_COLLECTION_SERVICES_SOURCE=${ANSIBLE_COLLECTION_SERVICES_SOURCE:-git+https://github.com/osism/ansible-collection-services}
ANSIBLE_PLAYBOOKS_MANAGER_SOURCE=${ANSIBLE_PLAYBOOKS_MANAGER_SOURCE:-git+https://github.com/osism/ansible-playbooks-manager}

INSTALL_ANSIBLE=${INSTALL_ANSIBLE:-true}
INSTALL_ANSIBLE_ROLES=${INSTALL_ANSIBLE_ROLES:-true}
VENV_PATH=${VENV_PATH:-.venv}
VENV_PYTHON_BIN=${VENV_PYTHON_BIN:-python3}

pushd $CONFIGURATION_DIRECTORY/environments/manager > /dev/null

# If the versions for the Ansible collections are available in the manager environment,
# these are used. Otherwise, the main branch is taken as the default.
if [[ -e run.sh ]]; then
    source <(sed -n "5,7p" run.sh)
else
    ANSIBLE_COLLECTION_COMMONS_VERSION=${ANSIBLE_COLLECTION_COMMONS_VERSION:-main}
    ANSIBLE_COLLECTION_SERVICES_VERSION=${ANSIBLE_COLLECTION_SERVICES_VERSION:-main}
    ANSIBLE_PLAYBOOKS_MANAGER_VERSION=${ANSIBLE_PLAYBOOKS_MANAGER_VERSION:-main}
fi

if [[ $INSTALL_ANSIBLE == "true" && -e requirements.txt ]]; then
    if [[ ! -e $VENV_PATH ]]; then
        $VENV_PYTHON_BIN -m venv "$VENV_PATH"

        # shellcheck source=/dev/null
        source "$VENV_PATH/bin/activate"
        pip3 install -r requirements.txt

    else

        # shellcheck source=/dev/null
        source "$VENV_PATH/bin/activate"

    fi
fi

command -v ansible-playbook >/dev/null 2>&1 || { echo >&2 "ansible-playbook not installed"; exit 1; }
command -v ansible-galaxy >/dev/null 2>&1 || { echo >&2 "ansible-galaxy not installed"; exit 1; }

ANSIBLE_USER=${ANSIBLE_USER:-dragon}
CLEANUP=${CLEANUP:-false}

cleanup () {
    if [[ $CLEANUP == "true" ]]; then
        rm id_rsa.operator
        rm -rf "$VENV_PATH"
    fi
}
trap cleanup ERR EXIT

if [[ $INSTALL_ANSIBLE_ROLES == "true" ]]; then
    ansible-galaxy collection install -f "${ANSIBLE_COLLECTION_COMMONS_SOURCE},${ANSIBLE_COLLECTION_COMMONS_VERSION}"
    ansible-galaxy collection install -f "${ANSIBLE_COLLECTION_SERVICES_SOURCE},${ANSIBLE_COLLECTION_SERVICES_VERSION}"
    ansible-galaxy collection install -f "${ANSIBLE_PLAYBOOKS_MANAGER_SOURCE},${ANSIBLE_PLAYBOOKS_MANAGER_VERSION}"
fi

if [[ \
      $(head -1 $CONFIGURATION_DIRECTORY/environments/secrets.yml | grep -v -q \$ANSIBLE_VAULT) == 1 || \
      $(head -1 $CONFIGURATION_DIRECTORY/environments/manager/secrets.yml | grep -v -q \$ANSIBLE_VAULT) == 1 \
   ]]; then
    export ANSIBLE_ASK_VAULT_PASS=true
fi

if [[ ! -e id_rsa.operator ]]; then
    ansible-playbook \
        -i localhost, \
        -e @../secrets.yml \
        -e "keypair_dest=$(pwd)/id_rsa.operator" \
        osism.manager.keypair "$@" || exit $?
fi

ansible-playbook \
    --private-key id_rsa.operator \
    -i hosts \
    -e @../images.yml \
    -e @../configuration.yml \
    -e @../secrets.yml \
    -e @images.yml \
    -e @configuration.yml \
    -e @secrets.yml \
    -u "$ANSIBLE_USER" \
    osism.manager.docker "$@" || exit $?

popd > /dev/null
