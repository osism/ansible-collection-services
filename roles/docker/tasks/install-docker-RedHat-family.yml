---
- name: Install Docker repository
  become: true
  ansible.builtin.command: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  changed_when: true

- name: Add Docker GPG key
  become: true
  ansible.builtin.rpm_key:
    state: present
    key: https://download.docker.com/linux/centos/gpg

- name: Update package cache
  become: true
  ansible.builtin.command: dnf makecache
  changed_when: true

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Check whether packages are installed that should not be installed
  ansible.builtin.fail:
    msg: "{{ ansible_facts.packages[item] | length }} versions of {{ item }} are installed!"
  when: "item in ansible_facts.packages"
  loop: "{{ docker_packages_fail }}"

- name: Install yum utilities
  become: true
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: present
    lock_timeout: "{{ dnf_lock_timeout | default(300) }}"
  loop:
    - python3-dnf-plugin-versionlock

- name: Install container.d
  become: true
  ansible.builtin.dnf:
    name: "{{ containerd_package_name }}"
    state: present
    lock_timeout: "{{ dnf_lock_timeout | default(300) }}"
  when: docker_manage_containerd|bool

- name: Pin container.d
  become: true
  ansible.builtin.command: "dnf versionlock {{ containerd_package_name }}"
  when: docker_manage_containerd|bool
  changed_when: true

- name: Pin other docker packages
  become: true
  ansible.builtin.command: "dnf versionlock {{ item }}"
  loop:
    - "{{ docker_cli_package_name }}-{{ docker_cli_version }}*"
    - "{{ docker_package_name }}-{{ docker_version }}*"
  changed_when: true

- name: Install docker
  become: true
  ansible.builtin.dnf:
    name:
      - "{{ docker_cli_package_name }}"
      - "{{ docker_package_name }}"
    state: present
    lock_timeout: "{{ dnf_lock_timeout | default(300) }}"

- name: Install python3 docker bindings package
  become: true
  ansible.builtin.dnf:
    name: "{{ docker_python3_package_name }}"
    state: present
    lock_timeout: "{{ dnf_lock_timeout | default(300) }}"
  when:
    - docker_python_install | bool
    - not docker_python_install_from_pip | bool

- name: Install python bindings with pip  # noqa: key-order[task], osism-fqcn
  become: true
  block:
    - name: Remove python docker packages (install python bindings from pip)
      ansible.builtin.dnf:
        name: "{{ docker_python_package_names }}"
        state: absent
        lock_timeout: "{{ dnf_lock_timeout | default(300) }}"

    - name: Install python3-pip package (install python bindings from pip)
      ansible.builtin.dnf:
        name: python3-pip
        state: present
        lock_timeout: "{{ dnf_lock_timeout | default(300) }}"

    - name: Install docker packages (install python bindings from pip)
      ansible.builtin.pip:
        name: "{{ docker_pip_package_name }}"
        extra_args: "{{ docker_pip_extra_args }}"
        executable: pip3
        state: present

  when:
    - docker_python_install | bool
    - docker_python_install_from_pip | bool

- name: Install packages required by docker login
  become: true
  ansible.builtin.dnf:
    name: ["gnupg2", "pass"]
    state: present
    lock_timeout: "{{ dnf_lock_timeout | default(300) }}"
  when:
    - docker_registry_username is defined and docker_registry_username|string|length > 0
    - docker_registry_password is defined and docker_registry_password|string|length > 0

- name: Ensure that some packages are not installed
  become: true
  ansible.builtin.dnf:
    name:
      - docker-buildx-plugin
      - docker-ce-rootless-extras
    state: absent
    lock_timeout: "{{ dnf_lock_timeout | default(300) }}"
