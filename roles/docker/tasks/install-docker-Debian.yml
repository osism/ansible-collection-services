---
- name: Gather the apt package facts
  package_facts:
    manager: auto

- name: Check whether packages are installed that should not be installed
  fail:
    msg: "{{ ansible_facts.packages[item] | length }} versions of {{ item }} are installed!"
  when: "item in ansible_facts.packages"
  loop: "{{ docker_packages_fail }}"

- name: Install apt-transport-https package
  apt:
    name: apt-transport-https
    state: present
  become: true
  when: docker_configure_repository|bool
  changed_when: false

- name: Add repository gpg key
  apt_key:
    url: "{{ docker_debian_repository_key }}"
  become: true
  when: docker_configure_repository|bool

- name: Add repository
  apt_repository:
    repo: "{{ docker_debian_repository }}"
    state: present
    filename: docker
    update_cache: yes
    mode: 0644
  become: true
  when: docker_configure_repository|bool

- name: Pin package version
  copy:
    content: |
      Package: {{ docker_package_name }}
      Pin: version {{ docker_version }}*
      Pin-Priority: 1001
    dest: /etc/apt/preferences.d/docker
    mode: 0644
  become: true

- name: Pin cli package version
  copy:
    content: |
      Package: {{ docker_package_name }}-cli
      Pin: version {{ docker_version }}*
      Pin-Priority: 1001
    dest: /etc/apt/preferences.d/docker-cli
    mode: 0644
  become: true

- name: Unlock containerd package
  dpkg_selections:
    name: "{{ containerd_package_name }}"
    selection: install
  become: true
  tags: molecule-idempotence-notest

# NOTE: At this point the last available version of containerd should be installed
- name: Install containerd package
  apt:
    name: "{{ containerd_package_name }}"
    state: latest
  become: true  # noqa 403

- name: Lock containerd package
  dpkg_selections:
    name: "{{ containerd_package_name }}"
    selection: hold
  become: true
  tags: molecule-idempotence-notest

- name: Install docker-cli package
  apt:
    name: "{{ docker_cli_package_name }}={{ docker_version }}*"
    state: present
  become: true

- name: Install docker package
  apt:
    name: "{{ docker_package_name }}={{ docker_version }}*"
    state: present
  become: true

- name: Install python bindings with apt
  block:
    - name: Unblock installation of python docker packages
      file:
        dest: "/etc/apt/preferences.d/{{ item }}"
        state: absent
      loop: "{{ docker_python_package_names }}"

    - name: Install python3 docker package
      package:
        name: "{{ docker_python3_package_name }}"
        state: present

  become: true
  when: not docker_python_install_from_pip|bool

- name: Install python bindings with pip
  block:
    - name: Remove python docker packages (install python bindings from pip)
      package:
        name: "{{ item }}"
        state: absent
      loop: "{{ docker_python_package_names }}"

    - name: Block installation of python docker packages (install python bindings from pip)
      copy:
        content: |
          Package: {{ item }}
          Pin: version *
          Pin-Priority: -1
        dest: "/etc/apt/preferences.d/{{ item }}"
        mode: 0644
      loop: "{{ docker_python_package_names }}"

    - name: Install python3-pip package (install python bindings from pip)
      package:
        name: python3-pip
        state: present

    - name: Install docker packages (install python bindings from pip)
      pip:
        name: "{{ docker_pip_package_name }}"
        extra_args: "{{ docker_pip_extra_args }}"
        executable: pip3
        state: present

  become: true
  when: docker_python_install_from_pip|bool

- name: Install packages required by docker login
  package:
    name: "{{ item }}"
    state: present
  loop:
    - gnupg2
    - pass
  become: true
  when:
    - docker_registry_username is defined and docker_registry_username|length > 0
    - docker_registry_password is defined and docker_registry_password|length > 0
