---
- name: Remove old architecture-dependent repository
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [ arch=amd64 ] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    state: absent
    filename: docker
  when: docker_configure_repository|bool

- name: Gather the apt package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Check whether packages are installed that should not be installed
  ansible.builtin.fail:
    msg: "{{ ansible_facts.packages[item] | length }} versions of {{ item }} are installed!"
  when: "item in ansible_facts.packages"
  loop: "{{ docker_packages_fail }}"

- name: Install apt-transport-https package
  become: true
  ansible.builtin.apt:
    name: apt-transport-https
    state: present
    lock_timeout: "{{ apt_lock_timeout | default(300) }}"
  when: docker_configure_repository|bool

- name: Add repository gpg key
  become: true
  ansible.builtin.get_url:
    url: "{{ docker_debian_repository_key }}"
    dest: /etc/apt/trusted.gpg.d/docker.asc
    mode: 0644
    owner: root
    group: root
  when:
    - docker_configure_repository|bool

- name: Add repository
  become: true
  ansible.builtin.apt_repository:
    repo: "{{ docker_debian_repository }}"
    state: present
    filename: docker
    update_cache: true
    mode: 0644
  when: docker_configure_repository|bool

- name: Update package cache
  become: true
  ansible.builtin.apt:
    update_cache: true
    lock_timeout: "{{ apt_lock_timeout | default(300) }}"

- name: Pin package version
  become: true
  ansible.builtin.copy:
    content: |
      Package: {{ docker_package_name }}
      Pin: version {{ docker_version }}*
      Pin-Priority: 1001
    dest: /etc/apt/preferences.d/docker
    mode: 0644

- name: Pin cli package version
  become: true
  ansible.builtin.copy:
    content: |
      Package: {{ docker_package_name }}-cli
      Pin: version {{ docker_cli_version }}*
      Pin-Priority: 1001
    dest: /etc/apt/preferences.d/docker-cli
    mode: 0644

- name: Unlock containerd package
  become: true
  ansible.builtin.dpkg_selections:
    name: "{{ containerd_package_name }}"
    selection: install
  when:
    - docker_manage_containerd|bool
    - containerd_package_name in ansible_facts.packages
  tags: molecule-idempotence-notest

# NOTE: At this point the last available version of containerd should be installed
- name: Install containerd package
  become: true
  ansible.builtin.apt:
    name: "{{ containerd_package_name }}"
    state: latest
    lock_timeout: "{{ apt_lock_timeout | default(300) }}"
  when: docker_manage_containerd|bool

- name: Lock containerd package
  become: true
  ansible.builtin.dpkg_selections:
    name: "{{ containerd_package_name }}"
    selection: hold
  tags: molecule-idempotence-notest
  when: docker_manage_containerd|bool

- name: Install docker-cli package
  become: true
  ansible.builtin.apt:
    name: "{{ docker_cli_package_name }}={{ docker_cli_version }}*"
    state: present
    lock_timeout: "{{ apt_lock_timeout | default(300) }}"
    allow_downgrade: true

- name: Install docker package
  become: true
  ansible.builtin.apt:
    name: "{{ docker_package_name }}={{ docker_version }}*"
    state: present
    lock_timeout: "{{ apt_lock_timeout | default(300) }}"
    allow_downgrade: true

- name: Install python bindings with apt  # noqa: key-order[task], osism-fqcn
  become: true
  block:
    - name: Unblock installation of python docker packages
      ansible.builtin.file:
        dest: "/etc/apt/preferences.d/{{ item }}"
        state: absent
      loop: "{{ docker_python_package_names }}"

    - name: Install python3 docker package
      ansible.builtin.apt:
        name: "{{ docker_python3_package_name }}"
        state: present
        lock_timeout: "{{ apt_lock_timeout | default(300) }}"

  when:
    - docker_python_install | bool
    - not docker_python_install_from_pip | bool

- name: Install python bindings with pip  # noqa: key-order[task], osism-fqcn
  become: true
  block:

    - name: Remove python docker packages (install python bindings from pip)
      ansible.builtin.apt:
        name: "{{ docker_python_package_names }}"
        state: absent
        lock_timeout: "{{ apt_lock_timeout | default(300) }}"

    - name: Block installation of python docker packages (install python bindings from pip)
      ansible.builtin.copy:
        content: |
          Package: {{ item }}
          Pin: version *
          Pin-Priority: -1
        dest: "/etc/apt/preferences.d/{{ item }}"
        mode: 0644
      loop: "{{ docker_python_package_names }}"

    - name: Install python3-pip package (install python bindings from pip)
      ansible.builtin.apt:
        name: python3-pip
        state: present
        lock_timeout: "{{ apt_lock_timeout | default(300) }}"

    - name: Install docker packages (install python bindings from pip)
      ansible.builtin.pip:
        name: "{{ docker_pip_package_name }}"
        extra_args: "{{ docker_pip_extra_args }}"
        executable: pip3
        state: present

  when:
    - docker_python_install | bool
    - docker_python_install_from_pip | bool

- name: Install packages required by docker login
  become: true
  ansible.builtin.apt:
    name: ["gnupg2", "pass"]
    state: present
    lock_timeout: "{{ apt_lock_timeout | default(300) }}"
  when:
    - docker_registry_username is defined and docker_registry_username|string|length > 0
    - docker_registry_password is defined and docker_registry_password|string|length > 0

- name: Ensure that some packages are not installed
  become: true
  ansible.builtin.apt:
    name:
      - docker-buildx-plugin
      - docker-ce-rootless-extras
    state: absent
