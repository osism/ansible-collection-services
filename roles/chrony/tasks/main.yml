---
- name: Check minimum and maximum number of servers
  ansible.builtin.fail:
    msg: >
      A minimum of {{ chrony_minimum_number_of_servers }} of server(s) must
      be configured. Currently {{ chrony_servers | length }} server(s) are
      configured.
  when: chrony_servers | length < chrony_minimum_number_of_servers | int

- name: Gather variables for each operating system
  ansible.builtin.include_vars: "{{ ansible_os_family }}-family.yml"

- name: Set chrony_conf_file variable to default value
  ansible.builtin.set_fact:
    chrony_conf_file: "{{ __chrony_conf_file }}"
  when: chrony_conf_file|default(None) == None

- name: Set chrony_key_file variable to default value
  ansible.builtin.set_fact:
    chrony_key_file: "{{ __chrony_key_file }}"
  when: chrony_key_file|default(None) == None

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Manage timesyncd service
  become: true
  ansible.builtin.service:
    name: systemd-timesyncd.service
    state: stopped
    enabled: false
  when:
    - ansible_os_family == "Debian"
    - "'systemd-timesyncd.service' in ansible_facts.services"
    - "ansible_facts.services['systemd-timesyncd.service']['status'] != 'not-found'"

- name: Include distribution specific install tasks
  ansible.builtin.include_tasks: "install-{{ ansible_os_family }}-family.yml"

- name: Manage chrony service
  become: true
  ansible.builtin.service:
    name: "{{ chrony_service_name }}"
    state: started
    enabled: true

- name: Check if configuration file exists
  ansible.builtin.stat:
    path: "{{ chrony_conf_file }}"
  register: chrony_conf_check

- name: Copy configuration file
  become: true
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ chrony_conf_file }}"
    mode: 0644
  when:
    - chrony_conf_check.stat.exists
  with_first_found:
    - "{{ chrony_local_conf_template }}"
    - chrony.conf.j2
  notify:
    - Restart chrony service
