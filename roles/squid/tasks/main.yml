---
# tasks file for squid

- name: Include install tasks
  ansible.builtin.include_tasks: "install-{{ ansible_os_family }}-family.yml"
  tags: install

- name: Create required directories
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ operator_user }}"
    group: "{{ operator_group }}"
    mode: 0750
  loop:
    - "{{ squid_configuration_directory }}"
    - "{{ squid_configuration_directory }}/conf.d"
    - "{{ squid_docker_compose_directory }}"

- name: Copy squid configuration files
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ squid_configuration_directory }}/conf.d/{{ item }}"
    mode: 0644
    owner: "{{ operator_user }}"
    group: "{{ operator_group }}"
  loop:
    - osism.conf
  notify: Restart squid service

- name: Remove osism_allow_list.conf configuration file
  ansible.builtin.file:
    path: "{{ squid_configuration_directory }}/conf.d/osism_allow_list.conf"
    state: absent

- name: Copy docker-compose.yml file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ squid_docker_compose_directory }}/docker-compose.yml"
    owner: "{{ operator_user }}"
    group: "{{ operator_group }}"
    mode: 0640
  notify: Restart squid service

- name: Ensure that the squid service is up and running
  block:  # noqa osism-fqcn
    - name: Manage squid service
      become: true
      ansible.builtin.service:
        name: "{{ squid_service_name }}"
        state: started
        enabled: true
      register: result
      until: result["status"]["ActiveState"] == "active"
      retries: 10
      delay: 20
      notify: Wait for squid service to start
  rescue:
    # Compose is not always reliable when starting services. Therefore,
    # in case of an error at startup, another stop and start of the
    # service is tried here.
    - name: Stop squid service
      become: true
      ansible.builtin.service:
        name: "{{ squid_service_name }}"
        state: stopped

    - name: Do a manual start of the squid service
      ansible.builtin.command: "/usr/bin/docker compose --project-directory {{ squid_docker_compose_directory }} up -d --remove-orphans"
      changed_when: true
      failed_when: false

    # This does not change anything on the service side, but the unit is
    # then in the expected state.
    - name: Start squid service again
      become: true
      ansible.builtin.service:
        name: "{{ squid_service_name }}"
        state: started
      register: result
      until: result["status"]["ActiveState"] == "active"
      retries: 10
      delay: 20
      notify: Register that squid service was started
