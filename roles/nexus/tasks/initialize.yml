---
# NOTE: The file does not exist directly. Accordingly, the task fails at first.
- name: Get setup admin password
  community.docker.docker_container_exec:
    container: "{{ nexus_container_name }}"
    command: cat /nexus-data/admin.password
  register: result
  retries: 10
  delay: 20
  until: result.rc == 0
  no_log: true

- name: Set setup admin password
  set_fact:
    current_nexus_admin_password: "{{ result.stdout }}"
  no_log: true

- name: Provision scripts included in the container image
  community.docker.docker_container_exec:
    container: "{{ nexus_container_name }}"
    command: "/bin/bash -c 'NEXUS_PASSWORD={{ result.stdout }} /scripts/provision.sh /scripts/{{ item }}'"
  loop: "{{ nexus_provision_scripts }}"

- name: Provision scripts included in this ansible role
  include_tasks: declare-script.yml
  loop: "{{ nexus_provision_groovy_scripts }}"

- name: Set admin password
  ansible.builtin.include: call-script.yml
  vars:
    script_name: update_admin_password
    args:
      new_password: "{{ nexus_admin_password }}"

- name: Set new admin password
  set_fact:
    current_nexus_admin_password: "{{ nexus_admin_password }}"
  no_log: true

- name: Allow anonymous access
  community.docker.docker_container_exec:
    container: "{{ nexus_container_name }}"
    command: "/bin/bash -c 'NEXUS_PASSWORD={{ nexus_admin_password }} /scripts/enable-anonymous.sh'"

- name: Cleanup default repositories
  community.docker.docker_container_exec:
    container: "{{ nexus_container_name }}"
    command: "/bin/bash -c 'NEXUS_PASSWORD={{ nexus_admin_password }} /scripts/run.sh cleanup'"

- name: Setup http proxy
  ansible.builtin.include: call-script.yml
  vars:
    script_name: setup_http_proxy
    args:
      with_http_proxy: "{{ nexus_with_http_proxy }}"
      http_proxy_host: "{{ nexus_http_proxy_host }}"
      http_proxy_port: "{{ nexus_http_proxy_port }}"
      http_proxy_username: "{{ nexus_http_proxy_username }}"
      http_proxy_password: "{{ nexus_http_proxy_password }}"
      with_https_proxy: "{{ nexus_with_https_proxy }}"
      https_proxy_host: "{{ nexus_https_proxy_host }}"
      https_proxy_port: "{{ nexus_https_proxy_port }}"
      https_proxy_username: "{{ nexus_https_proxy_username }}"
      https_proxy_password: "{{ nexus_https_proxy_password }}"
      proxy_exclude_hosts: "{{ nexus_proxy_exclude_hosts }}"

- name: Setup realms
  ansible.builtin.include: call-script.yml
  vars:
    script_name: setup_realms
    args:
      docker_bearer_token_realm: "{{ nexus_docker_bearer_token_realm }}"

- name: Process definitions for docker
  block:
    - name: Apply defaults to docker proxy repos
      set_fact:
        nexus_repos_docker_proxy: >-
          {%- set result=[] -%}
          {%- for repo in nexus_repos_docker_proxy -%}
            {{ result.append(nexus_repos_docker_defaults | combine(repo)) }}
          {%- endfor -%}
          {{ result | to_json | from_json }}

    - name: Add docker repositories to global repos list
      set_fact:
        _nexus_repos_global_list: >-
          {{
            _nexus_repos_global_list | default([])
            +
            (nexus_repos_docker_proxy | map('combine', {"format": "docker", "type": "proxy"}) | list)
          }}

- name: Process definitions for apt repositories
  block:
    - name: Apply defaults to apt proxy repos
      set_fact:
        nexus_repos_apt_proxy: >-
          {%- set result=[] -%}
          {%- for repo in nexus_repos_apt_proxy -%}
            {{ result.append(nexus_repos_apt_defaults | combine(repo)) }}
          {%- endfor -%}
          {{ result | to_json | from_json }}
    - name: Add apt repositories to global repos list
      set_fact:
        _nexus_repos_global_list: >-
          {{
            _nexus_repos_global_list | default([])
            +
            (nexus_repos_apt_proxy | map('combine', {"format": "apt", "type": "proxy"}) | list)
          }}

- name: Create configured repositories
  include_tasks: call-script.yml
  vars:
    script_name: create_repos_from_list
    args: "{{ _nexus_repos_global_list }}"

- name: Set osism.nexus.status fact
  ansible.builtin.include_role:
    name: osism.commons.state
  vars:
    state_name: osism
    state_section: nexus
    state_option: status
    state_value: "True"
